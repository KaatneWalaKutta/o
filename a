Absolutely, Sruti — if you're able to access **PDFs or Excel files directly without authentication**, that's a **serious issue**, especially if those files contain client data, internal reports, or protected resources.

Let’s go through this just like before: severity analysis, proper report language, reproduction steps, and remediation.

---

## 🔐 **Title:**

**Unauthenticated Access to Sensitive Document Resources (PDF/XLS)**

---

## 📝 **Description:**

Certain downloadable resources (e.g., **PDF**, **Excel**) are accessible **without authentication** by directly browsing to the file’s URL. These files are not linked publicly within the authenticated UI, but they can be accessed by anyone with the URL.

This behavior indicates a **lack of access control enforcement on static resources**, allowing potential exposure of internal or sensitive documents.

---

## 🧠 **Impact:**

| Risk                      | Description                                                                                         |
| ------------------------- | --------------------------------------------------------------------------------------------------- |
| 🔓 Information Disclosure | Sensitive business data (e.g., reports, exports) might be exposed                                   |
| 🔁 Link Sharing Abuse     | Anyone with the URL (even unauthenticated users) can access or distribute the files                 |
| 🕵️‍♀️ Recon by Attackers | Attackers can guess or crawl common file paths (`/documents/report1.xlsx`, `/downloads/export.pdf`) |
| 💥 Regulatory Risk        | If files contain PII/PHI, this could trigger **compliance violations (GDPR, HIPAA, etc.)**          |

---

## 🧪 **Steps to Reproduce:**

1. Log out of the application or open a new incognito window
2. Paste the direct URL to a downloadable resource (e.g., `/downloads/report.xlsx`)
3. Observe that the file downloads or opens without requiring authentication

✅ *Optional test:* Try guessing filenames (`report2.pdf`, `export_2023.xlsx`) to check for enumeration potential

---

## 🛡️ **Remediation:**

* ❌ **Do not rely on security by obscurity** (i.e., hiding links or guessing that users won’t know the URL)
* ✅ Implement **access control checks** for static file routes:

  * Use middleware to enforce session/token validation for file-serving endpoints
  * Store sensitive documents behind authenticated routes or proxy them via secure API endpoints
* ✅ Add **response headers** to prevent caching or hotlinking (`Cache-Control`, `Content-Disposition`)
* ✅ Log and monitor document access attempts — especially from unauthenticated sessions

---

## 🧯 Bonus: Prevention Hardening Tips

| Layer                     | Recommendation                                        |
| ------------------------- | ----------------------------------------------------- |
| Web Server (Nginx/Apache) | Restrict file routes behind authentication logic      |
| S3/CDN (if used)          | Use signed URLs with expiry                           |
| App Layer                 | Use role-based authorization before serving downloads |

---

## 🏷️ Tags:

* CWE-284: Improper Access Control
* CWE-200: Exposure of Sensitive Information
* OWASP A01: Broken Access Control
* 📌 **Forced Browsing** (unauthenticated variant)

---

## ✅ Final Verdict: Is It a Valid Issue?

**Yes — this is a real, reportable vulnerability**.
Even if the files are “meant to be public,” it’s still important to:

* **Verify intentionality** with the dev/client
* **Label** them appropriately in reports
* **Log and monitor** access attempts

---

Would you like a short version of this write-up for email/slides, or want me to generate a full client-report markdown or PDF?
